Monday:
    - Integrated User Stories into github
    - Created Product Backlog Board within project
    - Created Sprint Backlog 1
        - Using user stories #1,#2 and #3 as they should be a good foundation start for the project
        - Creating my tasks and spikes for each of the stories.

Tuesday:
    - Creating Journal within GitHub and changing away from formal meeting notes
        - too much work to do it formally easier to just write it down informally
    - Starting on research which language to use UI
        - Looking at Java vs kotlin
            - I am more comfortable with Java compared to kotlin
            - Java libraries can be used for android and because it runs in a JVM
              it can be multi-platform(https://www.sciencedirect.com/topics/computer-science/multiple-platform). 
        - Looking at Java vs Python
            - Was thinking if I want to do python, but I would rather work in Java
              as I have more understanding on how to create the UI using javaFX(https://openjfx.io/)
              and using JUnit(https://junit.org/junit5/). Whereas with Python I do not know how to do
              testing or how to create a user interface. This could be done with some research but as I 
              see no actual upside to using Java based on my understanding of the project so far(https://www.guru99.com/java-vs-python.html).
              Java has more of an Object orientated approach which I prefer and thus will be choosing Java.
              Based on that article java is used on more platforms. My UI should not be really intensive on algorithm thus the slower run time
              due to JIT compiler shouldn't be a big problem.
        - Java version
            - Based on javafx 17 has LTS(https://gluonhq.com/products/javafx/) support till 2026.
            - Will be using OpenJDK as it is under GNU General Public License and is becoming better (https://www.openlogic.com/blog/java-experts-openjdk-vs-oracle-jdk)
            - Installing Java OpenJDK 17 which also has LTS
            - we are using gradle as per (https://gradle.org/maven-vs-gradle/)
            - JUnit jupiter 5.8.1 will be used(https://junit.org/junit5/docs/current/user-guide/).
            - IntelliJ will be used for Java Development
    - Starting Research for Folder Hierarchy Development 
        - Decided to split into UI and ROS and will be further split into its library and packages if needed.
    - Some research into branching
        - https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/making-changes-in-a-branch/managing-branches
        - Will be creating a branch per Sprint, maybe create sub branches for each user story or task unsure.
        - Created "sprint1 branch". This will be where all the code will be written before it will be merged into main branch.
    - Research UI library creation
        - Creation of a jar or java binary can be used (https://stackoverflow.com/questions/3612567/how-to-create-my-own-java-libraryapi)
    - Research TCP Protocol UI library
        - took that as inspiration: https://www.codejava.net/java-se/networking/java-socket-client-examples-tcp-ip
    - Research TCP Protocol in ROS package
        - Online source works partially

    - Review Wednesday morning.

Wednesday:
    - Review:
        - Yesterday client was setup and works so far. Server side reads wrong port. Will try to hard code it to see what happens.
          Need to check if the input stream on Java client side needs to be flushed? Flushing is the usage of removing unwanted characters
          from the input so that they wont be a problem(https://stackoverflow.com/questions/69337937/what-does-it-mean-to-flush-the-input-buffer).
        - Otherwise decent progress. Idea for today is making the communication work. After that writing Test classes already maybe?.
        - Think about what kind of protocol i will create.