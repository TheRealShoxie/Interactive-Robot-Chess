Monday:
    - Started looking into how to get the external camera into the transform tree
        - Got all my cameras into transform tree
        - Placed all the objects into gazebo
        - Had problems with where the depth camera transforms its image to
        - I had to make sure that the link the camera is attached to has x forward as in gazebo coordinates
        - Then had to create a intermidiate frame/link to convert that into a image
        - Based of: https://www.youtube.com/watch?v=A3nw2M47K50&t=1108s
    - Used this webside for possible open_cv image processing algorithms that come with opencv: http://wiki.ros.org/opencv_apps#goodfeature_track
        - Using openCV for edge detection. There is a edgeDetection launch file inside opencv_apps launch files
            - That worked now checking on how to get the cells that I need and check how I can show a image of that so i have a better
            way of debugging it
        - Got typ in meeting to try out opencv_goodfeature_track which tells me points
        - Played around with hough_lines.launch which seems to do well but after using contour moments some cells dont get chosen properly
            - more research or look more into using goodfeature_track as another possible solution

Tuesday:
    - Used goodfeatures again to try to access the points and see if I can write some logic to detect the squares.
      Problem with hough lines into contour moments was that strangely enough some squares didnt get used properly.
      But before I look into goodfeatures I will try to figure out to work with hugh_lines again.
        - Changed to a unordered set for selecting the cells: https://www.geeksforgeeks.org/how-to-create-an-unordered_set-of-user-defined-class-or-struct-in-c/
        - Decided to work with set sorted works the best to get rid of cells.
        - Was able to extract the cells perfectly
        - All based on assumptions that the board is directly underneath the camera, the board doesn't move.
        - To calculate if a cell is occupied I look at all the pixel values for that depth. Then I calc the avarage depth and if the single depth
            is shorter than a required minimum we have a piece there.
        - To calculate what color the piece is I take the center of the x and y values for the depth which should represent the chesspieces center
        - THen I look at the color at that pixel and calculate a singleDigit RGB value and set a cutoff point of white or black

    - On the this webside: https://www.fide.com/FIDE/handbook/Standards_of_Chess_Equipment_and_tournament_venue.pdf
        - On point 2.2 height and weight are defined for standards

    - After spawning in all pawns my current way of using hugh lines doesn't work as the cells arent correctly created anymore due to
        view angles. Will need to look into good features again and see if I cen find a way to deal with

Wednesday:
    - Started looking into good_features and how to use the points to create the squares with an algorithm
    - Starting working on a primitive algorithm to extract the information
    - Extracted information by creating a set of the points which allows me to filter out duplicates and also allows me to order the points
    - Then create rectangles within a certain threshold between points
        - these rectangles represent the chessboard cells and squares
        - Using that I scan the whole cell to get the depth value for the piece if there is open_cv
        - This then gets used to get the color of the chesspieces
        - This now will be published using a rostopic

    - Now need to work on creating a state machine
        - SeverNode and ChessWrapperNode are directly connected rn.
            - This has to be seperated.
            - Insted of ServerNode publishing we make the nodes themselves listen to their respectevile own topic and make the other 
              topics publish to it instead of it publishing to the others
            - Had to rewrite how the communicate now will go back to testing integration manually if it works so far
            - Created a NodeHelper class because both ServerNode and CommandExecuterNode share forwarding of messages.
            - Thus created a helper class which defines forwarding in a generalized term such that it can be used by any node that needs 
              to forward messages and waits for a specific sender if needed.

    - Started working on Creating the Target
        - takes a FEN Move single part and selects the target cells
        - Need to keep in mind that targets should be set before robot arm moves

Thursday:
    - Continue work on setting target
        - Realized taht the squares arent ordered as there is sometimes a mismatch by a few pixesl.
        - This was fixed by making the squares a set and allowing for some threshold when comparing squares
    - Setting target finished. Using a ChessMove to convert into Cell position and then continiously publishing that cell
    - Reworked internal communication to the state where it is generalized
        - This had to be done to pass information through the Command Executer to the needed nodes.
        - And back to the server
        - It now functions as a hub and executes a stateMachine for the chess Engine move
    - ChessEngine move state machine work started
        - First getting the chessEngine move
        - Setting the targets works
        - Work started on robotic arm moving to the target and doing its own logic

    - Reworked CommandExecuter into a stateMachine for ease of use to expand in the future. And making it possible to create a interrupter for 
        example if the robot arm needs to stop due to collision

    - Robot arm
        - First started by creating a planning phase to make sure the robot arm doesnt move into the ground or hits the chessboard
            - The chessboard will have a variable for its dimensions and position such that in the future it can be chagned and 
            isnt hard coded into the program
        - Deleting of planning_scene_objects not possible unsure why

        - Working on basic movement
            - So I had a lot of trouble starting the MoveGroupInterface, this took me around 5/6 hrs.
            - Understanding what it is trying to do and then how to fix it
            - So because the robot_description is published under a namespace my_gen3 it cannot find the robot model
            - If i remove the namespace from the robotGazebo.launch file it finds the robot_description but not its sematics
            - After googling didnt help at all I thought about how to fix it. First I checked if their gazebo launch has the same problem
                and it does. So next idea was to remove the namespace from their original file too which also didn't help. The huge problem
                that I had was that their example is python only I could choose to switch to python which I was about to do but then I Realized
                that in their python example they set a namespace so I looked into how to set a namespace for C++ but couldnt really find anything
                so my workaround was to just launch the node inside a launch file and wrap that node in the launch file around a namespace
                the namespace my_gen3. That did the trick and it worked. Took me 5-6hrs in total to figure it out

Friday:
    - Finished setting up transforming now need to work on making the robotArm move to the position
    - Realized that the robot arm cant reach everything and that poses werent reached a lot
    - Changed position of chessboard and how robot arm moves around
    - This is done really simple and not complicated at all
        - Goes to target picks it up goes far into the air and drops it from the air
        - Had to do this in a short amount of time

    - Now need to work on incoporating it inside the system
        - It worked quite well will do the same for the playerMove next to ChessEngine move to simulate playerMovement on the board
        - Need to find a way to wait with robotArmStateStart till system is completely setup 
    
    - Finished generally works so far from what I can see.
        - Need to find a way to do castling then I can call it finished for now 
        - Castling was a bit interesting to implement had to create a checkLastMove castle on ChessWrapper to check it so that it function with the rest of the system
        - Need to look at how heavy chessPieces are and set the pieces to that weight

Saturday:
    - Tested implementation from yesterday for castling. Didnt work then something weird happens so gotta start debugging.
    Really hard to test as a standalone

    - Finished implementing castling
        - Works - manually tested due to integration
        - Now code is finished modules are kept as is
        - Will move sprint 2 into main and work from main here on out
        - Will start on writing code comments and cleaning up the code. Then will start writing tests.
        - After that the report will be started.
    
    - Actually added a error converter
    - Also started working on playing with the robot arm and without it through the UI.
    - Further added the possibility to stop the game and check if restarting would work or not.
    - Added option on the UI and the ROS system to change the state of the simulation. If you want to play in sim or not in sim.
        - As in use robot arm or not to show without it taking too long what is going on.
        - Will now start working on commenting code and writing test cases
