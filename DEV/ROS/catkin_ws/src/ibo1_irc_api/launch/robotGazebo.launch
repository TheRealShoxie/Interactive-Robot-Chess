<!--
 * robotGazebo.launch
 * <p>
 * This launch file starts the gazebo and rviz environment with respective arguments.
 * 
 * <p>
 * 3rd party code used here. The launch file is an adaption from the original ros kortex ros library for ros-noetic.
 * Link to the github repository: https://github.com/Kinovarobotics/ros_kortex. Accesses 30th of April 2023
 * It uses the ros kortex package. This file is an adaption from the original spawn_kortex_robot.launch found under the kortex_gazebo
 * folder and then inside the launch folder.
 * 
 * <p>
 * Adaptions made are the removal of chaning to different robot arms.
 * Current version still uses a lot of args which should not be edited.
 * Current version only allows the change of following args:
 * - start_rviz
 * - use_sim_time
 * - debu
 * - gui
 * - paused
 * - start_delay_seconds
 * 
 * This file further spawns the external camera. It also changes the gazebo model path for the models used
 * in the gazebo world.
 * 
 * 
 * 
 * 
 * @author Omar Ibrahim
 * @version 0.1 ( Initial development ).
 * @version 1.0 ( Initial release ).
 * 
 * @see main.launch
 * @see ros kortex_gazebo package
 * @see worlds/chessRoom.world
 * @see description external_camera.xacro
 * @see full_robot.xacro
-->

<launch>

    <!-- Tell Gazebo where to find our custom object models -->
    <env name="GAZEBO_MODEL_PATH" value="$(find ibo1_irc_api)/models:$(optenv GAZEBO_MODEL_PATH)" />


    <!-- Arguments -->
    <!-- Start the GUIs -->
    <arg name="start_rviz" default="true"/>
    
    <!-- Initial position in Gazebo -->
    <arg name="x0" default="0"/>
    <arg name="y0" default="0"/>
    <arg name="z0" default="0"/>

    <!-- Arm type -->
    <arg name="arm" default="gen3"/>
    <arg name="dof" default="7" /> <!-- Number of degrees of freedom of the arm -->
    <arg name="vision" default="true"/> <!-- True if the arm has a Vision module -->
    
    <!-- Default gripper for Gen3 is none, default gripper for Gen3 lite is gen3_lite_2f -->
    <arg name="gripper" default="robotiq_2f_140" />
    
    <arg name="robot_name" default="my_$(arg arm)"/>
    <arg name="prefix" default=""/>
    <arg name="cyclic_data_publish_rate" default="40"/> <!--Hz-->

    <!-- Gazebo parameters -->
    <arg name="use_sim_time" default="true"/>
    <arg name="debug" default="false" />
    <arg name="gui" default="true" />
    <arg name="paused" default="true" />


    <!-- Start Gazebo -->
    
    <!-- Launch Gazebo with an empty world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find ibo1_irc_api)/worlds/chessRoom.world"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="paused" value="$(arg paused)"/>
        
    </include>

    <!-- Delay before homing the arm -->
    <arg name="start_delay_seconds" default="5"/>

    <group ns="external_camera">
        <!-- Load the description for the robot -->
        <param name="external_camera_description" command="$(find xacro)/xacro --inorder $(find ibo1_irc_api)/description/external_camera.xacro"/>

        <!-- Spawn the external camera in Gazebo -->
        <node name="robot_model_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -param external_camera_description -model external_camera -x 0 -y 0 -z 0 -robot_namespace external_camera_overhead"/>


        <!-- Start robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            respawn="false" output="screen">
            <remap from="robot_description" to="external_camera_description" />
        </node>
    </group>

    

    <!--Robot Arm launching -->
    <!--_______________________________________________________________________________________________________________________________________________________________________________________-->
    <group ns="$(arg robot_name)">

        <!-- Load the description for the robot -->
        <!-- With gripper -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find ibo1_irc_api)/description/full_robot.xacro dof:=$(arg dof) vision:=$(arg vision) sim:=true prefix:=$(arg prefix)"/>

        <!-- Spawn the robot in Gazebo -->
        <!-- With gripper -->
        <node name="robot_model_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -param robot_description -model $(arg robot_name) -x $(arg x0) -y $(arg y0) -z $(arg z0)
            -robot_namespace $(arg robot_name)
                -J $(arg prefix)joint_1 1.57
                -J $(arg prefix)joint_2 0.35
                -J $(arg prefix)joint_3 3.14
                -J $(arg prefix)joint_4 -2.00
                -J $(arg prefix)joint_5 0
                -J $(arg prefix)joint_6 -1.00
                -J $(arg prefix)joint_7 1.57"/>

        <!-- Load controller configuration file from kortex_control package -->
        <rosparam file="$(find kortex_control)/arms/$(arg arm)/$(arg dof)dof/config/joint_position_controllers.yaml" command="load" subst_value="true"/>
        <rosparam file="$(find kortex_control)/grippers/$(arg gripper)/config/gripper_action_controller_parameters.yaml" command="load" subst_value="true"/>

        <!-- Start the trajectory controllers -->
        <!-- With gripper -->
        <node name="$(arg prefix)$(arg arm)_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" args="$(arg prefix)$(arg arm)_joint_trajectory_controller $(arg prefix)joint_state_controller $(arg prefix)$(arg gripper)_gripper_controller"/>

        <!-- Individual position controllers are stopped at first -->
        <!-- For 7 DOF arms -->
        <node name="$(arg prefix)$(arg arm)_position_controllers_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" args=" --stopped
            $(arg prefix)joint_1_position_controller
            $(arg prefix)joint_2_position_controller
            $(arg prefix)joint_3_position_controller
            $(arg prefix)joint_4_position_controller
            $(arg prefix)joint_5_position_controller
            $(arg prefix)joint_6_position_controller
            $(arg prefix)joint_7_position_controller"/>

        <!-- Start simulated Kortex Driver -->
        <node name="$(arg robot_name)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen"> <!--launch-prefix="gdb -ex run args"-->
            <param name="sim" value="true"/>
            <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
            <param name="arm" value="$(arg arm)"/>
            <param name="gripper" value="$(arg gripper)"/>
            <param name="dof" value="$(arg dof)"/>
            <param name="robot_name" value="$(arg robot_name)"/>
            <param name="prefix" value="$(arg prefix)"/>
            <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/joint_limits.yaml" subst_value="true"/>
            <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/twist_limits.yaml" subst_value="true"/>
            <rosparam command="load" file="$(find kortex_description)/grippers/$(arg gripper)/config/joint_limits.yaml" subst_value="true"/>
        </node>

        <!-- Start robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            respawn="false" output="screen"/>

        <!-- Start MoveIt main executable -->
        <!-- With gripper -->
        <include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_$(arg gripper)_move_it_config/launch/move_group.launch">
            <arg name="dof" value="$(arg dof)"/>
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <!-- Sleep, then unpause the physics in Gazebo and home the robot -->
        <node name="home_the_arm" pkg="kortex_gazebo" type="home_robot.py" output="screen" respawn="false" launch-prefix="bash -c 'sleep $(arg start_delay_seconds); $0 $@'">
            <param name="robot_name" value="$(arg robot_name)"/>
        </node>

        <!-- Test if homing the robot with MoveIt ended correctly -->
        <test test-name="paramtest_gazebo_initialization" pkg="rostest" type="paramtest">
            <param name="param_name_target" value="is_initialized" />
            <param name="param_value_expected" value="true" />
            <param name="wait_time" value="60" />
        </test> 

        <!-- Start RViz -->
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(find ibo1_irc_api)/config/config_file.rviz" if="$(arg start_rviz)"/>

    </group>

</launch>